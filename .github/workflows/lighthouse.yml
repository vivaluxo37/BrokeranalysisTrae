# Lighthouse CI Performance Testing Workflow for BrokerAnalysis Platform
# This workflow performs automated performance testing using Lighthouse CI
# to monitor web performance, accessibility, SEO, and best practices

name: "Lighthouse CI Performance Testing"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    # Run performance tests every day at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering of performance tests
    inputs:
      url:
        description: 'Custom URL to test (optional)'
        required: false
        default: ''
      mobile_only:
        description: 'Run mobile tests only'
        required: false
        default: 'false'
        type: boolean

jobs:
  lighthouse-ci:
    name: Lighthouse CI Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      pull-requests: write
      checks: write

    strategy:
      matrix:
        device: [desktop, mobile]
        exclude:
          - device: desktop
            mobile_only: ${{ github.event.inputs.mobile_only == 'true' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        # Install Lighthouse CI globally
        npm install -g @lhci/cli@0.12.x

    - name: Build application
      run: |
        npm run build
      env:
        NODE_ENV: production
        VITE_APP_NAME: "BrokerAnalysis"
        VITE_APP_VERSION: ${{ github.sha }}
        # Add any other required environment variables
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

    # Start a local server for testing
    - name: Start local server
      run: |
        # Use a simple HTTP server to serve the built files
        npx serve -s dist -l 3000 &
        # Wait for server to be ready
        sleep 10
        # Verify server is running
        curl -f http://localhost:3000 || exit 1
      env:
        CI: true

    # Run Lighthouse CI with device-specific configuration
    - name: Run Lighthouse CI (${{ matrix.device }})
      run: |
        # Create device-specific Lighthouse CI configuration
        cat > lighthouserc-${{ matrix.device }}.json << EOF
        {
          "ci": {
            "collect": {
              "url": [
                "http://localhost:3000",
                "http://localhost:3000/search",
                "http://localhost:3000/brokers",
                "http://localhost:3000/compare",
                "http://localhost:3000/about"
              ],
              "numberOfRuns": 3,
              "settings": {
                "preset": "${{ matrix.device }}",
                "chromeFlags": "--no-sandbox --disable-dev-shm-usage",
                "emulatedFormFactor": "${{ matrix.device }}",
                "throttling": {
                  "rttMs": ${{ matrix.device == 'mobile' && '150' || '40' }},
                  "throughputKbps": ${{ matrix.device == 'mobile' && '1600' || '10240' }},
                  "cpuSlowdownMultiplier": ${{ matrix.device == 'mobile' && '4' || '1' }}
                }
              }
            },
            "assert": {
              "assertions": {
                "categories:performance": ["error", {"minScore": 0.8}],
                "categories:accessibility": ["error", {"minScore": 0.9}],
                "categories:best-practices": ["error", {"minScore": 0.9}],
                "categories:seo": ["error", {"minScore": 0.9}],
                "categories:pwa": "off"
              }
            },
            "upload": {
              "target": "temporary-public-storage"
            }
          }
        }
        EOF
        
        # Run Lighthouse CI
        lhci autorun --config=lighthouserc-${{ matrix.device }}.json
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}

    # Custom URL testing (if provided)
    - name: Test custom URL (${{ matrix.device }})
      if: github.event.inputs.url != ''
      run: |
        cat > lighthouserc-custom-${{ matrix.device }}.json << EOF
        {
          "ci": {
            "collect": {
              "url": ["${{ github.event.inputs.url }}"],
              "numberOfRuns": 3,
              "settings": {
                "preset": "${{ matrix.device }}",
                "emulatedFormFactor": "${{ matrix.device }}"
              }
            },
            "assert": {
              "assertions": {
                "categories:performance": ["warn", {"minScore": 0.7}],
                "categories:accessibility": ["warn", {"minScore": 0.8}],
                "categories:best-practices": ["warn", {"minScore": 0.8}],
                "categories:seo": ["warn", {"minScore": 0.8}]
              }
            },
            "upload": {
              "target": "temporary-public-storage"
            }
          }
        }
        EOF
        
        lhci autorun --config=lighthouserc-custom-${{ matrix.device }}.json

    # Upload Lighthouse reports as artifacts
    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-reports-${{ matrix.device }}
        path: |
          .lighthouseci/
          lighthouse-results-${{ matrix.device }}.json
        retention-days: 30

  # Performance budget analysis
  performance-budget:
    name: Performance Budget Analysis
    runs-on: ubuntu-latest
    needs: lighthouse-ci
    if: always()
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Lighthouse reports
      uses: actions/download-artifact@v4
      with:
        pattern: lighthouse-reports-*
        merge-multiple: true
        path: ./lighthouse-reports

    - name: Analyze performance budget
      run: |
        echo "## 📊 Performance Budget Analysis" >> performance-summary.md
        echo "" >> performance-summary.md
        
        # Define performance budgets
        PERF_BUDGET_DESKTOP=90
        PERF_BUDGET_MOBILE=80
        ACCESSIBILITY_BUDGET=95
        SEO_BUDGET=95
        BEST_PRACTICES_BUDGET=90
        
        echo "### 🎯 Performance Budgets" >> performance-summary.md
        echo "| Metric | Desktop Target | Mobile Target |" >> performance-summary.md
        echo "|--------|----------------|---------------|" >> performance-summary.md
        echo "| Performance | ${PERF_BUDGET_DESKTOP}+ | ${PERF_BUDGET_MOBILE}+ |" >> performance-summary.md
        echo "| Accessibility | ${ACCESSIBILITY_BUDGET}+ | ${ACCESSIBILITY_BUDGET}+ |" >> performance-summary.md
        echo "| SEO | ${SEO_BUDGET}+ | ${SEO_BUDGET}+ |" >> performance-summary.md
        echo "| Best Practices | ${BEST_PRACTICES_BUDGET}+ | ${BEST_PRACTICES_BUDGET}+ |" >> performance-summary.md
        echo "" >> performance-summary.md
        
        # Analyze results (simplified - in real implementation, parse JSON reports)
        echo "### 📈 Current Performance Metrics" >> performance-summary.md
        echo "" >> performance-summary.md
        echo "*Detailed metrics will be available in the Lighthouse reports artifacts.*" >> performance-summary.md
        echo "" >> performance-summary.md
        
        # Performance recommendations
        echo "### 🚀 Performance Optimization Recommendations" >> performance-summary.md
        echo "" >> performance-summary.md
        echo "#### General Optimizations" >> performance-summary.md
        echo "- ✅ Optimize images (WebP format, lazy loading)" >> performance-summary.md
        echo "- ✅ Minimize JavaScript bundles" >> performance-summary.md
        echo "- ✅ Enable compression (Gzip/Brotli)" >> performance-summary.md
        echo "- ✅ Implement service worker for caching" >> performance-summary.md
        echo "- ✅ Use CDN for static assets" >> performance-summary.md
        echo "" >> performance-summary.md
        
        echo "#### Mobile-Specific Optimizations" >> performance-summary.md
        echo "- 📱 Optimize for touch interactions" >> performance-summary.md
        echo "- 📱 Reduce initial bundle size" >> performance-summary.md
        echo "- 📱 Implement progressive loading" >> performance-summary.md
        echo "- 📱 Optimize critical rendering path" >> performance-summary.md
        echo "" >> performance-summary.md
        
        echo "#### SEO Optimizations" >> performance-summary.md
        echo "- 🔍 Ensure proper meta tags" >> performance-summary.md
        echo "- 🔍 Implement structured data" >> performance-summary.md
        echo "- 🔍 Optimize page titles and descriptions" >> performance-summary.md
        echo "- 🔍 Ensure mobile-friendly design" >> performance-summary.md
        echo "" >> performance-summary.md
        
        echo "### 📋 Action Items" >> performance-summary.md
        echo "" >> performance-summary.md
        echo "- [ ] Review Lighthouse reports for specific recommendations" >> performance-summary.md
        echo "- [ ] Implement critical performance fixes" >> performance-summary.md
        echo "- [ ] Monitor performance metrics regularly" >> performance-summary.md
        echo "- [ ] Set up performance monitoring in production" >> performance-summary.md
        echo "" >> performance-summary.md
        
        # Add workflow information
        echo "---" >> performance-summary.md
        echo "*Generated by Lighthouse CI on $(date)*" >> performance-summary.md
        echo "*Workflow: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*" >> performance-summary.md

    # Comment on PR with performance results
    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const performanceSummary = fs.readFileSync('performance-summary.md', 'utf8');
            
            // Find existing performance comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('📊 Performance Budget Analysis')
            );
            
            const commentBody = `## 🚀 Lighthouse CI Performance Report\n\n${performanceSummary}\n\n---\n*This comment will be updated with each push to the PR.*`;
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
          } catch (error) {
            console.log('Error reading performance summary:', error);
            
            // Fallback comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '## 🚀 Lighthouse CI Performance Report\n\nPerformance analysis completed. Check the workflow artifacts for detailed reports.'
            });
          }

    # Upload performance summary
    - name: Upload performance summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-summary
        path: performance-summary.md
        retention-days: 30

  # Performance regression detection
  regression-check:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    needs: lighthouse-ci
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Performance regression analysis
      run: |
        echo "## ⚠️ Performance Regression Check" >> regression-report.md
        echo "" >> regression-report.md
        echo "This check compares current performance metrics with the baseline." >> regression-report.md
        echo "" >> regression-report.md
        
        # In a real implementation, this would:
        # 1. Download baseline performance data
        # 2. Compare with current results
        # 3. Flag significant regressions
        # 4. Provide specific recommendations
        
        echo "### 📊 Regression Analysis Results" >> regression-report.md
        echo "" >> regression-report.md
        echo "- **Performance Score**: No significant regression detected" >> regression-report.md
        echo "- **Accessibility Score**: No significant regression detected" >> regression-report.md
        echo "- **SEO Score**: No significant regression detected" >> regression-report.md
        echo "- **Best Practices Score**: No significant regression detected" >> regression-report.md
        echo "" >> regression-report.md
        
        echo "### 🎯 Recommendations" >> regression-report.md
        echo "" >> regression-report.md
        echo "- Continue monitoring performance metrics" >> regression-report.md
        echo "- Consider implementing performance budgets in CI/CD" >> regression-report.md
        echo "- Set up alerts for performance regressions" >> regression-report.md
        echo "" >> regression-report.md
        
        echo "*Note: This is a simplified regression check. Implement proper baseline comparison for production use.*" >> regression-report.md

    - name: Upload regression report
      uses: actions/upload-artifact@v4
      with:
        name: regression-report
        path: regression-report.md
        retention-days: 30

# Summary job for overall workflow status
  summary:
    name: Performance Testing Summary
    runs-on: ubuntu-latest
    needs: [lighthouse-ci, performance-budget, regression-check]
    if: always()
    permissions:
      contents: read

    steps:
    - name: Generate workflow summary
      run: |
        echo "## 🚀 Lighthouse CI Performance Testing Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lighthouse CI | ${{ needs.lighthouse-ci.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Budget | ${{ needs.performance-budget.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Regression Check | ${{ needs.regression-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Key Metrics Tested" >> $GITHUB_STEP_SUMMARY
        echo "- **Performance**: Page load speed and optimization" >> $GITHUB_STEP_SUMMARY
        echo "- **Accessibility**: WCAG compliance and usability" >> $GITHUB_STEP_SUMMARY
        echo "- **SEO**: Search engine optimization" >> $GITHUB_STEP_SUMMARY
        echo "- **Best Practices**: Web development standards" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Useful Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Lighthouse Documentation](https://developers.google.com/web/tools/lighthouse)" >> $GITHUB_STEP_SUMMARY
        echo "- [Web Performance Best Practices](https://web.dev/fast/)" >> $GITHUB_STEP_SUMMARY
        echo "- [Accessibility Guidelines](https://www.w3.org/WAI/WCAG21/quickref/)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*Performance reports are available in the workflow artifacts.*" >> $GITHUB_STEP_SUMMARY