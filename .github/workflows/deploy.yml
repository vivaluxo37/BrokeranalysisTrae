name: Deploy to Vercel

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:unit

      - name: Build project with prerendering
        run: |
          cd brokeranalysis
          npm ci
          npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_GROQ_API_KEY: ${{ secrets.VITE_GROQ_API_KEY }}
          VITE_OPENROUTER_API_KEY: ${{ secrets.VITE_OPENROUTER_API_KEY }}

      - name: Install Puppeteer dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
        
      - name: Run prerendering
        run: |
          cd brokeranalysis
          npm run prerender
        env:
          PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium-browser

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          cd brokeranalysis
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        if: github.ref == 'refs/heads/main'

      - name: Pull Vercel Environment Information (Preview)
        run: |
          cd brokeranalysis
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        if: github.ref != 'refs/heads/main'

      - name: Build Project Artifacts
        run: |
          cd brokeranalysis
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
        if: github.ref == 'refs/heads/main'

      - name: Build Project Artifacts (Preview)
        run: |
          cd brokeranalysis
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
        if: github.ref != 'refs/heads/main'

      - name: Deploy Project Artifacts to Vercel (Production)
        id: deploy-production
        run: |
          cd brokeranalysis
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
        if: github.ref == 'refs/heads/main'

      - name: Deploy Project Artifacts to Vercel (Preview)
        id: deploy-preview
        run: |
          cd brokeranalysis
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
        if: github.ref != 'refs/heads/main'

      - name: Comment PR with Preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const url = '${{ steps.deploy-preview.outputs.url }}';
            const comment = `üöÄ **Preview deployment ready!**
            
            üì± **Preview URL:** ${url}
            
            Built from commit: ${context.sha.substring(0, 7)}
            
            This preview will be automatically updated when you push new commits to this PR.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Update deployment status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const url = '${{ steps.deploy-production.outputs.url || steps.deploy-preview.outputs.url }}';
            const environment = '${{ github.ref }}' === 'refs/heads/main' ? 'production' : 'preview';
            
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: state,
              environment_url: url,
              description: `Deployment ${state} for ${environment}`
            });

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.deploy.result }}';
            const environment = '${{ github.ref }}' === 'refs/heads/main' ? 'Production' : 'Preview';
            const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
            const message = `${emoji} **${environment} Deployment ${status.toUpperCase()}**
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${context.sha.substring(0, 7)}
            **Workflow:** [View Details](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
            
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }