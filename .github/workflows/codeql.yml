# CodeQL Security Analysis Workflow for BrokerAnalysis Platform
# This workflow performs automated security analysis using GitHub's CodeQL
# to identify potential security vulnerabilities in JavaScript/TypeScript code

name: "CodeQL Security Analysis"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    # Run CodeQL analysis every Monday at 6:00 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    # Allow manual triggering of the workflow

jobs:
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for better analysis
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    # Install dependencies to ensure CodeQL can analyze the complete codebase
    - name: Install dependencies
      run: |
        npm ci
        # Install additional dev dependencies that might be needed for analysis
        npm install --save-dev @types/node

    # Initializes the CodeQL tools for scanning
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # Override default queries with security-focused query suites
        queries: +security-and-quality
        # Custom configuration for enhanced security scanning
        config: |
          name: "Enhanced Security Analysis"
          queries:
            - uses: security-and-quality
            - uses: security-extended
          paths-ignore:
            - "**/node_modules/**"
            - "**/dist/**"
            - "**/build/**"
            - "**/*.min.js"
            - "**/test-results/**"
            - "**/playwright-report/**"
          paths:
            - "src/**"
            - "api/**"
            - "scripts/**"

    # Build the project to ensure CodeQL can analyze compiled/transpiled code
    - name: Build project
      run: |
        npm run build
      env:
        # Provide minimal environment variables for build
        NODE_ENV: production
        VITE_APP_NAME: "BrokerAnalysis"

    # Perform CodeQL Analysis
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        # Upload results even if there are findings
        upload: true
        # Wait for processing to complete
        wait-for-processing: true

    # Additional security checks for package vulnerabilities
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --production
      continue-on-error: true

    # Check for known security issues in dependencies
    - name: Security audit with audit-ci
      run: |
        npx audit-ci --config .audit-ci.json
      continue-on-error: true

    # Upload security scan results as artifacts
    - name: Upload CodeQL results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: codeql-results-${{ matrix.language }}
        path: |
          ${{ github.workspace }}/.github/codeql/databases/
          ${{ github.workspace }}/codeql-results.sarif
        retention-days: 30

  # Separate job for dependency security scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # Use Snyk for additional dependency vulnerability scanning
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=package.json

    # Upload Snyk results to GitHub Security tab
    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk.sarif

  # Security policy compliance check
  security-policy:
    name: Security Policy Check
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Check for security policy files
    - name: Check security policy files
      run: |
        echo "Checking for security policy files..."
        
        # Check for SECURITY.md
        if [ ! -f "SECURITY.md" ] && [ ! -f ".github/SECURITY.md" ]; then
          echo "⚠️ Warning: No SECURITY.md file found. Consider adding security policy."
        else
          echo "✅ Security policy file found."
        fi
        
        # Check for .audit-ci.json configuration
        if [ ! -f ".audit-ci.json" ]; then
          echo "⚠️ Warning: No .audit-ci.json configuration found."
          echo "Creating default audit-ci configuration..."
          cat > .audit-ci.json << EOF
        {
          "moderate": true,
          "high": true,
          "critical": true,
          "allowlist": [],
          "report-type": "summary",
          "package-manager": "npm"
        }
        EOF
        else
          echo "✅ Audit CI configuration found."
        fi
        
        # Check for sensitive files that shouldn't be committed
        echo "Checking for sensitive files..."
        sensitive_files=("*.key" "*.pem" "*.p12" "*.pfx" ".env" ".env.local" "*.secret")
        
        for pattern in "${sensitive_files[@]}"; do
          if find . -name "$pattern" -not -path "./node_modules/*" | grep -q .; then
            echo "⚠️ Warning: Found potentially sensitive files matching pattern: $pattern"
            find . -name "$pattern" -not -path "./node_modules/*"
          fi
        done
        
        echo "Security policy check completed."

    # Validate package.json for security best practices
    - name: Validate package.json security
      run: |
        echo "Validating package.json for security best practices..."
        
        # Check for scripts that might be security risks
        if grep -q "postinstall" package.json; then
          echo "⚠️ Warning: postinstall script found. Review for security implications."
        fi
        
        # Check for private registry configurations
        if grep -q "registry" package.json; then
          echo "ℹ️ Info: Custom registry configuration found. Ensure it's trusted."
        fi
        
        # Check for engines specification
        if ! grep -q "engines" package.json; then
          echo "⚠️ Warning: No engines specification found. Consider adding Node.js version constraints."
        fi
        
        echo "Package.json security validation completed."

# Workflow summary and notifications
  notify-results:
    name: Notify Security Scan Results
    runs-on: ubuntu-latest
    needs: [analyze, dependency-scan, security-policy]
    if: always()
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
    - name: Security scan summary
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL Analysis | ${{ needs.analyze.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Policy | ${{ needs.security-policy.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Scan Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Security Recommendations" >> $GITHUB_STEP_SUMMARY
        echo "- Review any security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
        echo "- Keep dependencies updated using Dependabot" >> $GITHUB_STEP_SUMMARY
        echo "- Follow secure coding practices" >> $GITHUB_STEP_SUMMARY
        echo "- Regularly review and update security policies" >> $GITHUB_STEP_SUMMARY